// Задание 1:

//  1 – получи body элемент и выведи его в консоль;
 //  2 – получи элемент id= "title" и выведи его в консоль;
 //  3 – получи элемент class= "list" и выведи его в консоль;
 //  4 – получи все элементы с атрибутом data-topic и выведи их в консоль;
 //  5 – получи первый элемент из списка всех элементов с атрибутом data-topic и выведи его в консоль;
 //  6 – получи последний элемент из списка всех элементов с атрибутом data-topic и выведи его в консоль;
 //  7 – какой элемент соседствует для h1? Найти и выведи его в консоль;
 //  8 – по тегу h3 найти все заголовки и выведи их в консоль;
 //  9 – для каждого элмента h3 добавь class= "active" , который изменит цвет заголовка на красный цвет
 //  10 – найти элемент li который имеет атрибут data-topic со значением "navigation" и выведи его в консоль;
 //  11 - добавь для найденного элемента data-topic= "navigation" атрибут style и сделай его backgroundColor желтым
 //  12 - у элемента data-topic= "navigation" найди элемент р и измени его текст на "Я изменил здесь текст!" .
 //  13 – создай const currentTopic = "manipulation" ; после этого найди элемент у которого атрибут data-topic имеет значение, которое хранится в переменной currentTopic и выведи его в консоль;
 //  14 – добавь к найденному элементу атрибут style и сделай его backgroundColor голубым;
 //  15 – найти в документе заголовок, который имеет class= "completed" и выведи его в консоль;
 //  16 - выдали элемент li в котором находится заголовок, который имеет class= "completed" 
//  17 - после заголовка h1 (перед списком) добавь новый элемент p и задай ему следующий текст: "Объектная модель документа (Document Object Model)" 
//  18 - добавь новый элемент списка в конец списка, его заголовок - менты и поместить их в дерево – это использовать строки с тегами и позволить браузеру сделать всю трудную работу» . то есть,
// нужно создать элемент LI затем наполнить H3 и P и готовую LI забросить в конец списка //  19- сделай это самое, но используй шаблонные строки и метод insertAdjacentHTML()
 //  20 - очисти список



// Задание 2:

// Создайте контейнер div (с классом numberContainer) в HTML-документе
// и динамически создайте 100 блоков (с классом number), наполнив их рандомными
 // числами от 1 до 100 и добавьте их в контейнер div(numberContainer).
// Парные числа должны иметь зеленый фон (добавить класс even), 
 // Нечетные числа – желтый фон (добавить класс odd).

//  const randomNumber = () => Math .floor( Math .random() * 100 ) + 1 ;



// Задание 3:

// Form Events, Input, Focus, Blur and Submit.

// Используй шаблон формы из файла html.

// 1 - При событии `input`, если пользователь ввел в поле больше
// 6 символов то добавить класс `success`. Если же символов меньше 6 ,
// то класс `error`

// 2 – При событии `focus` сделай проверку на пустоту поля инпута,
// если же поле пустое, то сделай `outline` => `` 3 px solid red'`,
// если при фокусе поле непустое, то `outline` => `` 3 px solid green'`

// 3 – при событии `blur` сделай проверку на пустоту поля инпута,
// если же поле пустое, то сделай `outline` => `` 3 px solid red'`,
// если при фокусе поле непустое, то `outline` => `` 3 px solid lime'`

// 4 – при событии `submit`. Отмены поведения браузера по умолчанию.
// Достань данные из инпута и чек бокса, сделай проверку,
// что инпут не пуст, также, что нажатый чек бокс в положение true ,
// если пользователь все выполнил верно, собери данные (userName)
// в объект и выведи в консоль. В случае, если пользователь не выполнил
// одно из условий, выведи сообщение. Также реализуй добавление
// имя пользователя в span, вместо слова "Anonymous" .
// Если пользователь ввел имя, а затем удалили, сделай так,
// чтобы на место вернулось дефолтное знание "Anonymous" .
// При отправке формы, очисти инпут, верни чек бокс в положение
// false , верни дефолтное значение "Anonymous" в span.
 



// Задание 4:

 // Используй шаблон разметки из файла html и напиши следующий функционал: 
 // при щелчке на элемент меню, раскрывай блок с текстом. При повторном щелчке 
 // по элементу, раскрытый текст скрывается. Нажимая на другие 
//  элементы меню, предварительно открытые элементы не закрываются.



// Результат:

// Ваш собственный проект наполняется, в нем еще новые решения по 7-8 модулям, возможно даже с несколькими вариантами решения.
// Код размещен в репозитории GitHub, что обеспечит правильную организацию проектов и домашних задач.
document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM загружен, проверяем элементы...");

    const form = document.getElementById("task-form");
    const input = document.getElementById("task-input");
    const taskList = document.getElementById("task-list");

    if (!form || !input || !taskList) {
        console.error("Один из элементов не найден!");
        return;
    }

    form.addEventListener("submit", (event) => {
        event.preventDefault();

        const taskText = input.value.trim();
        if (taskText === "") return;

        const taskItem = document.createElement("li");
        taskItem.textContent = taskText;

        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "Удалить";
        deleteBtn.classList.add("delete-btn");

        deleteBtn.addEventListener("click", () => {
            taskItem.remove();
        });

        taskItem.appendChild(deleteBtn);
        taskList.appendChild(taskItem);

        input.value = "";
    });
});
